class TwoPlayerGame {
    // Member variables
    field Player player1;
    field Player player2;
    field Cactus cactus;
    field Bullet bullet1;
    field Bullet bullet2;
    field int lives1;
    field int lives2;
    field boolean gameActive;
    field String player1Name;
    field String player2Name;
    field boolean bullet1Active;
    field boolean bullet2Active;

    // Static properties    
    static int SCREEN_WIDTH;
    static int SCREEN_HEIGHT;
    static int topBorder;
    static int rightBorder;
    static int bottomBorder;
    static int leftBorder;
    
    constructor TwoPlayerGame new() {
        let SCREEN_WIDTH = 511;
        let SCREEN_HEIGHT = 254;

        // Initialize players
        let player1 = Player.new(100, 120);
        let player2 = Player.new(400, 120);
        let cactus = Cactus.new(250, 120); 
        let lives1 = 3;
        let lives2 = 3;
        let gameActive = false;
        let player1Name = String.new(10);
        let player2Name = String.new(10);
        let bullet1Active = false;
        let bullet2Active = false;
        
        // Black borders on game screen.
        let topBorder = 25;
        let rightBorder = (SCREEN_WIDTH - 24);
        let bottomBorder = (SCREEN_HEIGHT - 25);
        let leftBorder = 25;

        return this;
    }
        
    method void showStartMenu() {
        var char key;
        var boolean exit;
        
        do Screen.clearScreen();
        do Output.moveCursor(5, 25);
        do Output.printString("OUTLAW SHOOTOUT");
        do Output.moveCursor(7, 22);
        do Output.printString("Press SPACE to start");
        do Output.moveCursor(9, 20);
        do Output.printString("Controls:");
        do Output.moveCursor(10, 20);
        do Output.printString("Player 1: WASD, Space to shoot");
        do Output.moveCursor(11, 20);
        do Output.printString("Player 2: Arrow Keys, M to shoot");
        do Output.moveCursor(13, 20);
        do Output.printString("Press Q anytime to quit");
        
        let exit = false;
        while(~exit) {
            let key = Keyboard.keyPressed();
            if (key = 32) { // Space key
                let exit = true;
            }
            do Sys.wait(50);
        }
        
        // Wait until space is let go
        while (Keyboard.keyPressed() = 32) {
            do Sys.wait(50);
        }
        
        return;
    }
        
    method void getPlayerNames() {
        var String inputName;
        
        do Screen.clearScreen();
        
        // Get Player 1 name
        do Output.moveCursor(5, 20);
        do Output.printString("Enter Player 1 Name:");
        do Output.moveCursor(6, 20);
        
        let inputName = Keyboard.readLine("");
        if (inputName.length() > 0) {
            let player1Name = inputName;
        } else {
            let player1Name = String.new(8);
            do player1Name.appendChar(80); // P
            do player1Name.appendChar(108); // l
            do player1Name.appendChar(97); // a
            do player1Name.appendChar(121); // y
            do player1Name.appendChar(101); // e
            do player1Name.appendChar(114); // r
            do player1Name.appendChar(32); // space
            do player1Name.appendChar(49); // 1
        }
        
        // Get Player 2 name
        do Output.moveCursor(8, 20);
        do Output.printString("Enter Player 2 Name:");
        do Output.moveCursor(9, 20);
        
        let inputName = Keyboard.readLine("");
        if (inputName.length() > 0) {
            let player2Name = inputName;
        } else {
            let player2Name = String.new(8);
            do player2Name.appendChar(80); // P
            do player2Name.appendChar(108); // l
            do player2Name.appendChar(97); // a
            do player2Name.appendChar(121); // y
            do player2Name.appendChar(101); // e
            do player2Name.appendChar(114); // r
            do player2Name.appendChar(32); // space
            do player2Name.appendChar(50); // 2
        }
        
        return;
    }
    
    method void start() {
        var char currentKey;
        var boolean exit;
                
        do showStartMenu();
        do getPlayerNames();
        
        let exit = false;
        let gameActive = true;
        
        // Draw initial game
        do Screen.clearScreen();
        do drawBorders();
        do player1.draw();
        do player2.draw();
        do cactus.draw();
        do updateLives();
        
        // Main game loop
        while(~exit & gameActive) {
            // Handle keyboard input
            let currentKey = Keyboard.keyPressed();
            
            // Player 1 controls (WASD + Space to shoot)
            if (currentKey = 87) { do player1.setDirection(1); } // W
            if (currentKey = 83) { do player1.setDirection(2); } // S
            if (currentKey = 65) { do player1.setDirection(3); } // A
            if (currentKey = 68) { do player1.setDirection(4); } // D

            // Player 2 controls (arrow keys + M to shoot)
            if (currentKey = 131) { do player2.setDirection(1); } // Up arrow
            if (currentKey = 133) { do player2.setDirection(2); } // Down arrow
            if (currentKey = 130) { do player2.setDirection(3); } // Left arrow
            if (currentKey = 132) { do player2.setDirection(4); } // Right arrow
            
            // Bullet controls
            if ((currentKey = 32) & (~bullet1Active)) { // Space key for player 1
                let bullet1Active = true;                
                let bullet1 = Bullet.new(player1.getX() + 10, player1.getY() + 5, 1);
                do bullet1.draw();
            }            
            if ((currentKey = 77) & (~bullet2Active)) { // M key for player 2
                let bullet2Active = true;                
                let bullet2 = Bullet.new(player2.getX() - 5, player2.getY() + 5, 2); // Shoot left
                do bullet2.draw();
            }
            
            // Press 'q' to quit
            if (currentKey = 81) { 
                let exit = true; 
            }
            
            // Move players
            do player1.move();
            do player2.move();
                                    
            // Move bullets and check collisions
            if (bullet1Active) {
                do bullet1.move();
                
                // Check collisions
                if (checkBulletHit(bullet1, player2)) {
                    let lives2 = lives2 - 1;
                    let bullet1Active = false;
                    do bullet1.remove();
                    do updateLives();
                }                                
                if (checkBulletCactusHit(bullet1)) {
                    let bullet1Active = false;
                    do bullet1.remove();
                }
                
                // Check if bullet went off screen
                if (bullet1.getX() > rightBorder) {
                    let bullet1Active = false;
                    do bullet1.remove();
                }
            }            
            if (bullet2Active) {
                do bullet2.move();
                    
                // Check collisions
                if (checkBulletHit(bullet2, player1)) {                    
                    let lives1 = lives1 - 1;
                    let bullet2Active = false;
                    do bullet2.remove();
                    do updateLives();
                }                            
                if (checkBulletCactusHit(bullet2)) {
                    let bullet2Active = false;
                    do bullet2.remove();
                }
                
                // Check if bullet went off screen
                if (bullet2.getX() < (leftBorder + 5)) {
                    let bullet2Active = false;
                    do bullet2.remove();
                }
            }
            
            // Check for game over
            if ((lives1 < 1) | (lives2 < 1)) {
                let gameActive = false;
            }
                        
            // Redraw cactus
            do cactus.dispose();
            do cactus.draw(); 

            // Small delay to control game speed                       
            do Sys.wait(50);
        }
        
        // End game
        do showGameOver();                
        do dispose();

        return;
    }
    
    // Draw borders
    method void drawBorders() {
        do Screen.setColor(true);
        do Screen.drawRectangle(0, 0, SCREEN_WIDTH, topBorder); // Top Border
        do Screen.drawRectangle(0, 0, leftBorder, SCREEN_HEIGHT); // Left Border
        do Screen.drawRectangle(0, bottomBorder, SCREEN_WIDTH, SCREEN_HEIGHT); // Bottom Border
        do Screen.drawRectangle(rightBorder, 0, SCREEN_WIDTH, SCREEN_HEIGHT); // Right Border
        return;
    }
    
    // Update the lives display
    method void updateLives() {
        var int i;        
        do Screen.setColor(false);        
        // Draw player 1 lives
        do Output.moveCursor(22, 0);
        do Output.printString(player1Name);
        do Output.printString(" Lives: ");
        do Output.printInt(lives1);
        
        // Draw player 2 lives
        do Output.moveCursor(22, 40);
        do Output.printString(player2Name);
        do Output.printString(" Lives: ");
        do Output.printInt(lives2);

        return;
    }
        
    // Check if a bullet hit a player
    method boolean checkBulletHit(Bullet b, Player p) {
        // AABB Collision detection  
        if ((b.getX() < (p.getX() + p.getWidth())) & 
        ((b.getX() + b.getWidth()) > p.getX()) & 
        (b.getY() < (p.getY() + p.getHeight())) & 
        ((b.getY() + b.getHeight()) > p.getY())) {                    
            return true;
        }

        return false;
    }
    
    // Check if a bullet hit the cactus
    method boolean checkBulletCactusHit(Bullet b) {                        
        // AABB Collision detection
        if ((b.getX() < (cactus.getX() + cactus.getWidth())) & 
        ((b.getX() + b.getWidth()) > cactus.getX()) & 
        (b.getY() < (cactus.getY() + cactus.getHeight())) & 
        ((b.getY() + b.getHeight()) > cactus.getY())) {             
            return true;
        }        
        return false;
    }
        
    method void showGameOver() {
        var String winner;
        
        do Screen.clearScreen();
        do Output.moveCursor(10, 28);
        do Output.printString("GAME OVER");
        
        do Output.moveCursor(12, 25);
        do Output.printString("Final Result:");
        
        do Output.moveCursor(14, 20);
        do Output.printString(player1Name);
        do Output.printString(" Lives: ");
        do Output.printInt(lives1);
        
        do Output.moveCursor(15, 20);
        do Output.printString(player2Name);
        do Output.printString(" Lives: ");
        do Output.printInt(lives2);
        
        do Output.moveCursor(17, 20);
        if (lives1 > lives2) {
            do Output.printString(player1Name);
            do Output.printString(" Wins!");
        } else {
            if (lives2 > lives1) {
                do Output.printString(player2Name);
                do Output.printString(" Wins!");
            } else {
                do Output.printString("It's a tie!");
            }
        }
        
        // Wait 3 seconds before exiting
        do Sys.wait(3000);
        return;
    }
    

    // Accessors
    function int getScreenHeight() {
        return SCREEN_HEIGHT;
    }
    function int getScreenWidth() {
        return SCREEN_WIDTH;
    }
    function int getTopBorder() {
        return topBorder;
    }
    function int getRightBorder() {
        return rightBorder;
    }
    function int getBottomBorder() {
        return bottomBorder;
    }
    function int getLeftBorder() {
        return leftBorder;
    }


    // Deallocate memory
    method void dispose() {
        do player1.dispose();
        do player2.dispose();
        do cactus.dispose();
        if (bullet1Active) { do bullet1.dispose(); }
        if (bullet2Active) { do bullet2.dispose(); }
        do player1Name.dispose();
        do player2Name.dispose();
        do Memory.deAlloc(this);
        return;
    }
}