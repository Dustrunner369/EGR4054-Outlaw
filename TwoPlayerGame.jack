// TwoPlayerGame.jack - Outlaw shooting game
class TwoPlayerGame {
    field Player player1;
    field Player player2;
    field Cactus cactus;
    field Bullet bullet1;
    field Bullet bullet2;
    field int lives1;
    field int lives2;
    field boolean gameActive;
    field String player1Name;
    field String player2Name;
    field boolean bullet1Active;
    field boolean bullet2Active;
    
    // Constructor initializes the game
    constructor TwoPlayerGame new() {
        // Initialize players on opposite sides
        let player1 = Player.new(100, 120);
        let player2 = Player.new(400, 120);
        let cactus = Cactus.new(250, 120); // Centered cactus obstacle
        let bullet1 = Bullet.new(0, 0, 0); // Initially inactive
        let bullet2 = Bullet.new(0, 0, 0);
        let lives1 = 3;
        let lives2 = 3;
        let gameActive = false;
        let player1Name = String.new(10);
        let player2Name = String.new(10);
        let bullet1Active = false;
        let bullet2Active = false;
        return this;
    }
    
    // Show start menu
    method void showStartMenu() {
        var char key;
        var boolean exit;
        
        do Screen.clearScreen();
        do Output.moveCursor(5, 25);
        do Output.printString("OUTLAW SHOOTOUT");
        do Output.moveCursor(7, 22);
        do Output.printString("Press SPACE to start");
        do Output.moveCursor(9, 20);
        do Output.printString("Controls:");
        do Output.moveCursor(10, 20);
        do Output.printString("Player 1: Arrow Keys, M to shoot");
        do Output.moveCursor(11, 20);
        do Output.printString("Player 2: WASD, Space to shoot");
        do Output.moveCursor(13, 20);
        do Output.printString("Press Q anytime to quit");
        
        let exit = false;
        while(~exit) {
            let key = Keyboard.keyPressed();
            if (key = 32) { // Space key
                let exit = true;
            }
            do Sys.wait(50);
        }
        
        // Wait until space is released
        while (Keyboard.keyPressed() = 32) {
            do Sys.wait(50);
        }
        
        return;
    }
    
    // Get player names
    method void getPlayerNames() {
        var String inputName;
        
        do Screen.clearScreen();
        
        // Get Player 1 name
        do Output.moveCursor(5, 20);
        do Output.printString("Enter Player 1 Name:");
        do Output.moveCursor(6, 20);
        
        let inputName = Keyboard.readLine("");
        if (inputName.length() > 0) {
            let player1Name = inputName;
        } else {
            let player1Name = String.new(8);
            do player1Name.appendChar(80); // P
            do player1Name.appendChar(108); // l
            do player1Name.appendChar(97); // a
            do player1Name.appendChar(121); // y
            do player1Name.appendChar(101); // e
            do player1Name.appendChar(114); // r
            do player1Name.appendChar(32); // space
            do player1Name.appendChar(49); // 1
        }
        
        // Get Player 2 name
        do Output.moveCursor(8, 20);
        do Output.printString("Enter Player 2 Name:");
        do Output.moveCursor(9, 20);
        
        let inputName = Keyboard.readLine("");
        if (inputName.length() > 0) {
            let player2Name = inputName;
        } else {
            let player2Name = String.new(8);
            do player2Name.appendChar(80); // P
            do player2Name.appendChar(108); // l
            do player2Name.appendChar(97); // a
            do player2Name.appendChar(121); // y
            do player2Name.appendChar(101); // e
            do player2Name.appendChar(114); // r
            do player2Name.appendChar(32); // space
            do player2Name.appendChar(50); // 2
        }
        
        return;
    }
    
    // Start the game with two players - fixed version
    method void start() {
        var char currentKey;
        var boolean exit;
        
        // Show the start menu and get player names
        do showStartMenu();
        do getPlayerNames();
        
        let exit = false;
        let gameActive = true;
        
        // Draw the initial game state
        do Screen.clearScreen();
        do drawBorders();
        do player1.draw();
        do player2.draw();
        do cactus.draw();
        do updateLives();
        
        // Main game loop
        while(~exit & gameActive) {
            // Handle keyboard input
            let currentKey = Keyboard.keyPressed();
            
            // Player 1 controls (arrow keys + M to shoot)
            if (currentKey = 131) { do player1.setDirection(1); } // Up arrow
            if (currentKey = 133) { do player1.setDirection(2); } // Down arrow
            if (currentKey = 130) { do player1.setDirection(3); } // Left arrow
            if (currentKey = 132) { do player1.setDirection(4); } // Right arrow
            
            // Player 2 controls (WASD + Space to shoot)
            if (currentKey = 87) { do player2.setDirection(1); } // W
            if (currentKey = 83) { do player2.setDirection(2); } // S
            if (currentKey = 65) { do player2.setDirection(3); } // A
            if (currentKey = 68) { do player2.setDirection(4); } // D
            
            // Shooting controls - make sure bullet isn't already active
            if ((currentKey = 77) & (~bullet1Active)) { // M key for player 1
                let bullet1Active = true;
                // Create new bullet at player's position
                let bullet1 = Bullet.new(player1.getX() + 10, player1.getY() + 5, 1); // Shoot right
                do bullet1.draw();
            }
            
            if ((currentKey = 32) & (~bullet2Active)) { // Space key for player 2
                let bullet2Active = true;
                // Create new bullet at player's position
                let bullet2 = Bullet.new(player2.getX(), player2.getY() + 5, 2); // Shoot left
                do bullet2.draw();
            }
            
            if (currentKey = 81) { let exit = true; } // 'q' to quit
            
            // Move the players
            do player1.move();
            do player2.move();
            
            // Check for player collision with cactus
            if (checkCactusCollision(player1)) {
                do player1.moveBack();
            }
            if (checkCactusCollision(player2)) {
                do player2.moveBack();
            }
            
            // Move bullets and check collisions
            if (bullet1Active) {
                do bullet1.move();
                
                // Check if bullet hit player 2
                if (checkBulletHit(bullet1, player2)) {
                    let lives2 = lives2 - 1;
                    let bullet1Active = false;
                    do bullet1.remove();
                    do updateLives();
                }
                
                // Check if bullet hit cactus
                if (checkBulletCactusHit(bullet1)) {
                    let bullet1Active = false;
                    do bullet1.remove();
                }
                
                // Check if bullet went off screen
                if ((bullet1.getX() < 0) | (bullet1.getX() > 511)) {
                    let bullet1Active = false;
                    do bullet1.remove();
                }
            }
            
            if (bullet2Active) {
                do bullet2.move();
                
                // Check if bullet hit player 1
                if (checkBulletHit(bullet2, player1)) {
                    let lives1 = lives1 - 1;
                    let bullet2Active = false;
                    do bullet2.remove();
                    do updateLives();
                }
                
                // Check if bullet hit cactus
                if (checkBulletCactusHit(bullet2)) {
                    let bullet2Active = false;
                    do bullet2.remove();
                }
                
                // Check if bullet went off screen
                if ((bullet2.getX() < 0) | (bullet2.getX() > 511)) {
                    let bullet2Active = false;
                    do bullet2.remove();
                }
            }
            
            // Check if game is over (one player out of lives)
            if ((lives1 < 1) | (lives2 < 1)) {
                let gameActive = false;
            }
            
            // Small delay to control game speed
            do Sys.wait(50);
        }
        
        // Game over screen
        do showGameOver();
        
        // Clean up
        do dispose();
        return;
    }
    
    // Draw the game borders
    method void drawBorders() {
        do Screen.setColor(true);
        do Screen.drawRectangle(0, 0, 511, 0); // Top
        do Screen.drawRectangle(0, 0, 0, 254); // Left
        do Screen.drawRectangle(0, 254, 511, 254); // Bottom
        do Screen.drawRectangle(511, 0, 511, 254); // Right
        return;
    }
    
    // Update the lives display
    method void updateLives() {
        var int i;
        
        // Draw player 1 lives (left side)
        do Output.moveCursor(22, 0);
        do Output.printString(player1Name);
        do Output.printString(" Lives: ");
        
        let i = 0;
        while (i < lives1) {
            do Output.printChar(42); // Asterisk for life
            let i = i + 1;
        }
        
        // Draw player 2 lives (right side)
        do Output.moveCursor(22, 40);
        do Output.printString(player2Name);
        do Output.printString(" Lives: ");
        
        let i = 0;
        while (i < lives2) {
            do Output.printChar(42); // Asterisk for life
            let i = i + 1;
        }
        
        return;
    }
    
    // Check if a player collides with the cactus
    method boolean checkCactusCollision(Player p) {
        var int playerX, playerY, cactusX, cactusY, cactusWidth, cactusHeight;
        
        let playerX = p.getX();
        let playerY = p.getY();
        let cactusX = cactus.getX();
        let cactusY = cactus.getY();
        let cactusWidth = cactus.getWidth();
        let cactusHeight = cactus.getHeight();
        
        // Check for collision (expand cactus hitbox slightly)
        if ((playerX + 10 > cactusX - 2) & (playerX < cactusX + cactusWidth + 2) & 
            (playerY + 10 > cactusY - 2) & (playerY < cactusY + cactusHeight + 2)) {
            return true;
        }
        
        return false;
    }
    
    // Check if a bullet hit a player
    method boolean checkBulletHit(Bullet b, Player p) {
        var int bulletX, bulletY, playerX, playerY;
        
        let bulletX = b.getX();
        let bulletY = b.getY();
        let playerX = p.getX();
        let playerY = p.getY();
        
        // Simple collision check
        if ((bulletX + 3 > playerX) & (bulletX < playerX + 10) & 
            (bulletY + 2 > playerY) & (bulletY < playerY + 10)) {
            return true;
        }
        
        return false;
    }
    
    // Check if a bullet hit the cactus
    method boolean checkBulletCactusHit(Bullet b) {
        var int bulletX, bulletY, cactusX, cactusY, cactusWidth, cactusHeight;
        
        let bulletX = b.getX();
        let bulletY = b.getY();
        let cactusX = cactus.getX();
        let cactusY = cactus.getY();
        let cactusWidth = cactus.getWidth();
        let cactusHeight = cactus.getHeight();
        
        // Check for collision
        if ((bulletX + 3 > cactusX) & (bulletX < cactusX + cactusWidth) & 
            (bulletY + 2 > cactusY) & (bulletY < cactusY + cactusHeight)) {
            return true;
        }
        
        return false;
    }
    
    // Show game over screen
    method void showGameOver() {
        var String winner;
        
        do Screen.clearScreen();
        do Output.moveCursor(10, 28);
        do Output.printString("GAME OVER");
        
        do Output.moveCursor(12, 25);
        do Output.printString("Final Result:");
        
        do Output.moveCursor(14, 20);
        do Output.printString(player1Name);
        do Output.printString(" Lives: ");
        do Output.printInt(lives1);
        
        do Output.moveCursor(15, 20);
        do Output.printString(player2Name);
        do Output.printString(" Lives: ");
        do Output.printInt(lives2);
        
        do Output.moveCursor(17, 20);
        if (lives1 > lives2) {
            do Output.printString(player1Name);
            do Output.printString(" Wins!");
        } else {
            if (lives2 > lives1) {
                do Output.printString(player2Name);
                do Output.printString(" Wins!");
            } else {
                do Output.printString("It's a tie!");
            }
        }
        
        // Wait 3 seconds before exiting
        do Sys.wait(3000);
        return;
    }
    
    // Deallocate memory
    method void dispose() {
        do player1.dispose();
        do player2.dispose();
        do cactus.dispose();
        if (bullet1Active) { do bullet1.dispose(); }
        if (bullet2Active) { do bullet2.dispose(); }
        do player1Name.dispose();
        do player2Name.dispose();
        do Memory.deAlloc(this);
        return;
    }
}