class Player {
    field int x;
    field int y;
    field int width;
    field int height;    
    field int direction; // 1 = up, 2 = down, 3 = left, 4 = right
    field boolean alive;

    static int BOUNDARY_BUFFER;
    
    constructor Player new(int x_in, int y_in) {
        let BOUNDARY_BUFFER = 2;
        let x = x_in;
        let y = y_in;
        let width = 20;
        let height = 20;        
        let direction = 0;
        let alive = true;
        return this;
    }

    method void draw() {
        do Screen.setColor(true);        
        do Screen.drawRectangle(x, y, x + width, y + height);
        return;
    }

    // Removes the player
    method void remove() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + width, y + height);
        return;
    }

    method void move() {                                
        do remove();
        
        // Up
        if (direction = 1) {           
            if (y > (TwoPlayerGame.getTopBorder() + BOUNDARY_BUFFER)) {
                let y = y - 2;
            }
        }
        // Down
        if (direction = 2) {            
            if (y < (TwoPlayerGame.getBottomBorder() - height - BOUNDARY_BUFFER)) {
                let y = y + 2;
            }
        }
        // Left
        if (direction = 3) {
            if (x > (TwoPlayerGame.getLeftBorder() + BOUNDARY_BUFFER)) {
                let x = x - 2;
            }
        }
        // Right
        if (direction = 4) {
            if (x < (TwoPlayerGame.getRightBorder() - width - BOUNDARY_BUFFER)) {
                let x = x + 2;
            }
        }
                    
        do draw();
        return;
    }
    
    // Accessors
    method int getX() {
        return x;
    }    
    method int getY() {
        return y;
    }
    method int getWidth() {
        return width;
    }
    method int getHeight() {
        return height;
    }

    // Setter
    method void setDirection(int dir) {
        let direction = dir;
        return;
    }

    // Deallocate memory
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}