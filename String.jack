// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str; // Character array to store the string
    field int length; // Current length of the string
    field int maxLength; // Maximum capacity of the string

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if(maxLength < 1)
		{
			let str = Array.new(1);
		}
		else
		{
			let str = Array.new(maxLength);
		}
		let length = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < 0 | (length - 1) < j) 
        {
            do Output.printString("Error: invalid index!");
            do Sys.error(1);  // Index out of bounds
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < 0 | (length - 1) < j) {
            do Output.printString("Error: invalid index!");
            do Sys.error(2);  // Index out of bounds
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLength) 
        {
            let str[length] = c;
            let length = length + 1;
        } else 
        {
            do Output.printString("Error: String capacity exceeded");
            do Output.println();
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) 
        {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val;
        var int i;
        var boolean isNeg;
        
        let val = 0;
        let i = 0;
        let isNeg = false;
        
        // Check for negative sign
        if ((length > 0) & (str[0] = 45))// ASCII for '-' 
        { 
            let isNeg = true;
            let i = 1;
        }
        
        while ((i < length) & (str[i] > 47) & (str[i] < 58)) 
        {
            // ASCII values 48-57 represent digits 0-9
            let val = (val * 10) + (str[i] - 48);
            let i = i + 1;
        }
        
        if (isNeg) 
        {
            let val = -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int temp, lastDigit, divisor, digit;
        var Array digits;
        var int i, digitCount;
        
        // Reset the string
        let length = 0;
        
        // Handle negative numbers
        if (val < 0) {
            do appendChar(45); // ASCII for '-'
            let val = -val;
        }
        
        // Handle the case when val is 0
        if (val = 0) {
            do appendChar(48); // ASCII for '0'
            return;
        }
        
        // Temporary array to store digits (max 16 for 16-bit int)
        let digits = Array.new(16);
        let digitCount = 0;
        
        // Extract digits in reverse order
        let temp = val;
        while (temp > 0) {
            let lastDigit = temp - ((temp / 10) * 10); // val % 10
            let digits[digitCount] = lastDigit;
            let digitCount = digitCount + 1;
            let temp = temp / 10;
        }
        
        // Add digits to string in correct order
        let i = digitCount - 1;
        while (i > -1) {
            do appendChar(digits[i] + 48); // Convert to ASCII
            let i = i - 1;
        }
        
        // Free the array
        do digits.dispose();
        
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}