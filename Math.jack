class Math {

    /** Returns a * b with support for negative numbers */
    function int multiply(int a, int b) {
        var int result, count, positive, x, y;
        let result = 0;
        let count = 0;
        let positive = 1;

        let x = a;
        let y = b;

        if (x < 0) {
            let x = -x;
            let positive = positive - 1;
        }

        if (y < 0) {
            let y = -y;
            let positive = positive - 1;
        }

        while (count < y) {
            let result = result + x;
            let count = count + 1;
        }

        if (positive = 0) {
            let result = -result;
        }

        return result;
    }

    /** Returns a / b (integer division), supports negatives */
    function int divide(int a, int b) {
        var int result, negative, absA, absB;
        let result = 0;
        let negative = 0;
        let absA = a;
        let absB = b;

        if (absA < 0) {
            let absA = -absA;
            let negative = negative + 1;
        }

        if (absB < 0) {
            let absB = -absB;
            let negative = negative + 1;
        }

        while ((absA - absB) > -1) {
            let absA = absA - absB;
            let result = result + 1;
        }

        if (negative = 1) {
            let result = -result;
        }

        return result;
    }

    /** Returns 2^j */
    function int twoToThe(int j) {
        var int result;
        
        let result = 1;
        while (j > 0) {
            let result = result + result;  // Double the value
            let j = j - 1;
        }
        
        return result;
    }

    /** Returns floor(sqrt(n)), assuming n >= 0 */
    function int sqrt(int n) {
        var int guess, j, y, approx;
        
        let guess = 0;
        let j = 7;  // For 16-bit integers (log₂(2^15-1) ≈ 15/2 = 7.5)
        
        while (j > -1) {
            // Fixed: proper way to call a function in the same class
            let approx = guess + Math.twoToThe(j);
            let y = approx * approx;  // This is using the multiply function through Jack compiler
            
            if (~(y > n) & (y > 0)) {  // y <= n && y > 0
                let guess = approx;
            }
            
            let j = j - 1;
        }
        
        return guess;
    }

    /** Returns the smaller of a and b */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns the larger of a and b */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }
    // Returns the remainder of x/y
    function int mod(int x, int y) {
        var int q;
        let q = x / y;
        return x - (q * y);
    }
}
