// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean currentColor;
    static int screenBaseAddress;
    static Array powersOfTwo;

    /** Initializes the Screen. */
    function void init() {
        // Initialize currentColor to black.
        let currentColor = true; 
        let screenBaseAddress = 16384;

        //  Power of twos array for drawPixel(). 
        let powersOfTwo = Array.new(16);
		let powersOfTwo[0] = 1;
		let powersOfTwo[1] = 2;
		let powersOfTwo[2] = 4;
		let powersOfTwo[3] = 8;
		let powersOfTwo[4] = 16;
		let powersOfTwo[5] = 32;
		let powersOfTwo[6] = 64;
		let powersOfTwo[7] = 128;
		let powersOfTwo[8] = 256;
		let powersOfTwo[9] = 512;
		let powersOfTwo[10] = 1024;
		let powersOfTwo[11] = 2048;
		let powersOfTwo[12] = 4096;
		let powersOfTwo[13] = 8192;
		let powersOfTwo[14] = 16384;
		let powersOfTwo[15] = 16384 + 16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        // (512 * 256) / 16 = 8192
        // Loops through whole screen, sets each pixel to 0 (white).
        while (i < 8192) {
            do Memory.poke((screenBaseAddress + i), 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int specificXPixel;
        var int pixelValue;
        
        // Find the RAM address where the pixel is represented by x and y.
        let address = (y * 32) + (x / 16);
        let specificXPixel = Screen.mod(x, 16); // Get the x position
        let specificXPixel = powersOfTwo[specificXPixel]; // Get the 16-bit version of the x position

        // Use Memory.peek to get the 16-bit value at the address
        let pixelValue = Memory.peek(address + screenBaseAddress);
        
        // Use a bitwise operation to set only the bit that corresponds to the pixel to the current color
        if(currentColor) {
            // Set the pixel to black (set bit to 1)
            let pixelValue = pixelValue | specificXPixel;
        }
        else {
            // Set the pixel to white (set bit to 0)
            let pixelValue = pixelValue & ~specificXPixel;
        }

        // Use Memory.poke to write the modified 16-bit value back to the RAM address
        do Memory.poke(address + screenBaseAddress, pixelValue);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {        
        var int a;
        var int b;
        var int diff;
        var int x;
        var int y;
        var int dx;
        var int dy;
        var int startX;
        var int startY;

        let a = 0;
        let b = 0;
        let diff = 0;
        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let startX = Math.min(x1, x2);
        let startY = Math.min(y1, y2);

        // If there is no change in x, draw a vertical line.
        if(dx = 0) {
            do Screen.drawVerticalLine(x, y, dy);
            return;
        }
        // If there is no change in y, draw a horizontal line.
        else {
            if(dy = 0) {
                do Screen.drawHorizontalLine(x, y, dx);
                return;
            }
            // If there is change in both x and y, draw a diagonal line.
            else {
                // Draw diagonal lines going from bottom-left to top-right
                if((dx > 0 & dy < 0) | (dx < 0 & dy > 0)) {
                    if(dy < 0) {
                        do Screen.drawDiagonalLine(x, y, dx, dy);
                    }
                    else {
                        do Screen.drawDiagonalLine(x2, y2, -dx, -dy);
                    }
                }
                // Draw diagonal lines going from top-left to bottom-right
                else {
                    let dx = Math.abs(dx);
                    let dy = Math.abs(dy);
                    
                    while (~(a > dx) & ~(b > dy)) {
                        do Screen.drawPixel(startX + a, startY + b);
                        if (diff < 0) {
                            let a = a + 1;
                            let diff = diff + dy;				
                        }
                        else {
                            let b = b + 1;
                            let diff = diff - dx;
                        }
                    }	
                }
                return;
            }
        }                        
    } 
    function void drawVerticalLine(int x, int y, int dy) {
        var int i;
        var int direction;
        let i = 0;

        if(dy < 0) {
            let direction = -1;
        }
        else {
            let direction = 1;
        }

        // Set dy to |dy|
        let dy = Math.abs(dy);

        // Draw line
        while (~(i > dy)) {
            do Screen.drawPixel(x, y + (i * direction));
            let i = i + 1;
        }
        return;
    }
    function void drawHorizontalLine(int x, int y, int dx) {
        var int i;
        var int direction;
        let i = 0;

        if(dx < 0) {
            let direction = -1;
        }
        else {
            let direction = 1;
        }

        // Set dx to |dx|
        let dx = Math.abs(dx);

        // Draw line
        while (~(i > dx)) {
            do Screen.drawPixel(x + (i * direction), y);
            let i = i + 1;
        }
        return;
    }
    function void drawDiagonalLine(int x, int y, int dx, int dy) {
        var int diff;
        var int a;
    	var int b;

        let diff = 0;
    	let a = 0;
    	let b = 0;
    	
        while ((~(a > dx)) & (~(b < dy))) {
    		do Screen.drawPixel(x + a, y + b);
    		if (diff < 0) {
    			let b = b - 1;
    			let diff = diff + dx;
    		} else {
    			let a = a + 1;
    			let diff = diff + dy;
    		}
    	}
    	return;  
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {        
        var int dx;
        var int dy;
		var int startX;
        var int startY;
		var int i;
		
		let dx = Math.abs(x2 - x1);
		let dy = Math.abs(y2 - y1);        
		let startX = Math.min(x1, x2);
		let startY = Math.min(y1, y2);
		
		let i = 0;
        // Draws horizontal lines going down to build the rectangle.
		while (i < dy) {
			do Screen.drawHorizontalLine(startX, startY + i, dx); 
			let i = i + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {        
        var int dy;
		var int sqrtDist;
		
		let dy = -r;
        // Start at the top of the circle, draw horizontal lines going down.
		while (~(dy > r)) {
			let sqrtDist = Math.sqrt((r * r) - (dy * dy));
			do Screen.drawHorizontalLine(x - sqrtDist, y + dy, 2 * sqrtDist);
			let dy = dy + 1;
		}
		
        return;                
    }

    /** Performs the modulus function, only works with positive numbers */
    function int mod(int x, int y) {
        var int result;

        let result = x / y;

        return (x - (result * y));
    }
}
